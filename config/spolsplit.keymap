#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors/mouse_key_toggle.dtsi>

#define DEF 0
#define TSP 1
#define GME 2
#define LHB 3
#define NUM 4
#define MSK 5
#define MSC 6

#ifndef MOVE_Y
#define MOVE_Y(n) (0)
#endif
#ifndef MOVE_X
#define MOVE_X(n) (0)
#endif


#define U_MOUSE_MOVE_MAX 1700
#define MOU_U MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOU_D MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOU_L MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOU_R MOVE_X(U_MOUSE_MOVE_MAX)

#define U_MOUSE_SCROLL_MAX 20
#define SCL_U MOVE_Y(U_MOUSE_SCROLL_MAX)
#define SCL_D MOVE_Y(-U_MOUSE_SCROLL_MAX)
#define SCL_L MOVE_X(-U_MOUSE_SCROLL_MAX)
#define SCL_R MOVE_X(U_MOUSE_SCROLL_MAX)


/ {
        xy_transf: xy_transf {
                compatible = "zmk,input-processor-transform";
                #input-processor-cells = <1>;
                type = <INPUT_EV_REL>;
                x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
                y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
        };
        xy_scaler: xy_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>, <INPUT_REL_Y>;
                track-remainders;
        };
        x_scaler: x_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>;
        };
        to_wheel: to_wheel {
                compatible = "zmk,input-processor-code-mapper";
                #input-processor-cells = <0>;
                type = <INPUT_EV_REL>;
                map = <INPUT_REL_X INPUT_REL_HWHEEL>
                    , <INPUT_REL_Y INPUT_REL_WHEEL>;
        };

        tball0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tball0>;
                precise {
                        layers = <NUM>;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>
                                        , <&xy_scaler 1 25>, <&x_scaler 0 1>
                                        , <&to_wheel>;
                };
        };

        tball1_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tball1>;
                precise {
                        layers = <NUM>;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>
                                        , <&xy_scaler 1 25>, <&x_scaler 0 1>
                                        , <&to_wheel>;
                };
        };

        tpoint0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tpoint0>;
                input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>;
                precise {
                        layers = <NUM>;
                        inherit;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        inherit;
                        input-processors = <&xy_scaler 1 22>, <&x_scaler 0 1>
                                         , <&to_wheel>;
                };
        };

        tpad0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tpad0>;
                input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>;
                precise {
                        layers = <NUM>;
                        inherit;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        inherit;
                        input-processors = <&xy_scaler 1 22>, <&x_scaler 0 1>
                                         , <&to_wheel>;
                };
        };

        behaviors {
                m_v: mouse_move {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>;
                        x-input-code = <INPUT_REL_X>;
                        y-input-code = <INPUT_REL_Y>;
                        time-to-max-speed-ms = <300>;
                        acceleration-exponent = <1>;
                };
        };

        mmv_input_listener {
                compatible = "zmk,input-listener";
                device = <&m_v>;
                scroll {
                        layers = <MSC>;
                        inherit;
                        input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>
                                         , <&xy_scaler 1 75>, <&to_wheel>;
                };
        };
        
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |   ESC   |    `    |    1    |    2    |    3    |    4    |    5    |                                |    6    |    7    |    8    |    9    |    0    |    -    |    =    |   BSPC  |
// |   M1    |   TAB   |    Q    |    W    |    E    |    R    |    T    |                                |    Y    |    U    |    I    |    O    |    P    |    [    |    ]    |    \    |
// |   M2    |  CAPS   |    A    |    S    |    D    |    F    |    G    |   SPACE |            |   SPACE |    H    |    J    |    K    |    L    |    ;    |    '    | RETURN  | RETURN  |
// |   M3    |  SHIFT  |    Z    |    X    |    C    |    V    |    B    |   SPACE |            | CTRL+V  |    N    |    M    |    ,    |    .    |    /    |  SHIFT  |  R CTRL |   M4    |
// |   M5    |  R ALT  |   GUI   |   CMD   | ESCAPE  |   SPACE |   SPACE |   F3    |            |   GUI   |   DEL   |  SPACE  |   SPACE |  SCAPE  |  RETURN |  SPACE  |   TAB   |   M6    |
            bindings = <
    &kp ESC       &kp GRAVE  &kp N1   &kp N2    &kp N3    &kp N4    &kp N5                               &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp MINUS  &kp EQUAL   &kp BSPC
	&kp A         &kp TAB    &kp Q    &kp W     &kp E     &kp R     &kp T                                &kp Y     &kp U     &kp I     &kp O     &kp P     &kp LBKT   &kp RBKT    &kp BSLH
    &bt BT_SEL 1  &kp CAPS   &kp A    &kp S     &kp D     &kp F     &kp G     &kp SPACE         &kp SPACE &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT    &kp RET     &kp RET
    &bt BT_SEL 0  &kp LSHIFT &kp Z    &kp X     &kp C     &kp V     &kp B     &kp SPACE         &kp SPACE &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH  &kp RSHIFT &kp RCTRL   &kp A
    &bt BT_CLR    &kp LCTRL  &kp LALT &kp LGUI  &kp SPACE &kp SPACE &kp SPACE &kp F3            &kp SPACE &kp BSPC  &kp SPACE &kp SPACE &kp SPACE &kp LEFT  &kp UP     &kp RIGHT   &kp DOWN
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
